package service.#{package}.impl;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import bean.utils.BeanCopyUtils;
import common.StaticsConstancts;
import dao.BaseDao;
import dao.model.T#{Entity};
import model.common.QueryVO;
import model.#{package}.#{Entity}VO;
import service.#{package}.#{Entity}Service;

@Service("#{entity}Service")
public class #{Entity}ServiceImpl implements #{Entity}Service {

	@Autowired
	private BaseDao baseDao;

	@Override
	public Map<String, Object> query#{Entity}(QueryVO queryVO) {
		StringBuilder dataHQL = new StringBuilder();
		StringBuilder totalHQL = new StringBuilder();
		dataHQL.append("SELECT new map(id as id,sex as sex,"
				+ "(CASE status WHEN '1' THEN '启用' ELSE '停用' END) as status,DATE_FORMAT(createTime,'%Y-%m-%d') as createTime,"
				+ "  DATE_FORMAT(modifyTime,'%Y-%m-%d') as modifyTime,memo as memo) FROM T#{Entity} a WHERE  1=1  ");
		totalHQL.append("SELECT COUNT(*) FROM T#{Entity} a WHERE 1=1 ");
		Map<String, Object> params = new HashMap<String, Object>();
		buildHQL(queryVO, dataHQL, totalHQL, params);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put(StaticsConstancts.DATA, baseDao.findByPage(dataHQL.toString(), params, queryVO.getOffset(), queryVO.getLimit()));
		result.put(StaticsConstancts.TOTAL, baseDao.get(totalHQL.toString(), params));
		return result;
	}

	private void buildHQL(QueryVO queryVO, StringBuilder dataHQL, StringBuilder totalHQL, Map<String, Object> params) {
		if (StringUtils.isNotBlank(queryVO.getStatus())) {
			dataHQL.append("AND a.status=:status  ");
			totalHQL.append("AND a.status=:status  ");
			params.put("status", queryVO.getStatus());
		}
		if (StringUtils.isNotBlank(queryVO.getName())) {
			String keyword = "%" + queryVO.getName() + "%";
			dataHQL.append("AND name LIKE :keyword ");
			totalHQL.append("AND name LIKE :keyword ");
			params.put("keyword", keyword);
		}
		if (StringUtils.isNotBlank(queryVO.getSort())) {
			dataHQL.append("Order By " + queryVO.getSort() + " " + queryVO.getOrder());
		}
	}

	@Override
	public Serializable add#{Entity}(#{Entity}VO #{entity}VO) {
		T#{Entity} #{entity} = new T#{Entity}();
		BeanCopyUtils.copyProperties(#{entity}VO, #{entity});
		return baseDao.save(#{entity});

	}

	@Override
	public void modify#{Entity}(#{Entity}VO #{entity}VO) {
		T#{Entity} #{entity} = get#{Entity}ById(#{entity}VO.getId());
		BeanCopyUtils.copyProperties(#{entity}VO, #{entity});
		baseDao.update(#{entity});
	}

	@Override
	public void delete#{Entity}(Object #{entity}Id) {
		String hql = "DELETE T#{Entity} WHERE id=:id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", #{entity}Id);
		baseDao.delete(hql, params);
	}

	@Override
	public T#{Entity} get#{Entity}ById(Object #{entity}Id) {
		String hql="FROM T#{Entity} WHERE id=?";
		return (T#{Entity}) baseDao.get(hql, #{entity}Id);
	}

	@Override
	public #{Entity}VO get#{Entity}VOById(Object #{entity}Id) {
		#{Entity}VO #{entity}VO = new #{Entity}VO();
		BeanCopyUtils.copyProperties(get#{Entity}ById(#{entity}Id), #{entity}VO);
		return #{entity}VO;
	}
}
