$(window).load(function () {
        //设置iframe的父窗口中元素的高度
        setTimeout(function () {
            $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
            parent.$(window.parent.document).trigger('resizeHeight');
        }, 0)

        $(window).resize(function () {
            $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
            parent.$(window.parent.document).trigger('resizeHeight');
        });
        // 点击iframe中的内容时，触发父窗口的点击事件
        $(document).on('click', function () {
            parent.$(window.parent.document).trigger('click');
        });
    })
    //判断当前页面是否属于增加或者编辑页面，如果是就不允许清空下拉框
var isClear = true;
var currentPageName = window.location.toString();
if (currentPageName.indexOf("add") != -1 || currentPageName.indexOf("edit") != -1) {
    isClear = false;
}
//判断是否是德育模块
var isMoralModule = false;
if (currentPageName.indexOf("moral-education") != -1 || currentPageName.indexOf("query-statistics") != -1) {
    isMoralModule = true;
}
$(function () {
    //初始化select插件
	if($('.form-inline select,.form-horizontal select').length>0){
		 $('.form-inline select,.form-horizontal select').select2({
		        placeholder: '',
		        minimumResultsForSearch: Infinity,
		        allowClear: isClear

		    });
	}
    //表单清空按钮的清空功能
    $('.clear-js').click(function () {
        $('.panel-body .form-inline')[0].reset();
        if ($('.panel-body .form-inline select').length > 0) {
            $('.panel-body .form-inline select').select2('val', '');
        }
    });
    //全选按钮的全选功能
    $('.check-all-js').click(function () {
        //全选按钮的全选功能
        if ($(this)[0].checked) {
            $('.table').bootstrapTable('checkInvert');
        } else {
            $('.table').bootstrapTable('uncheckAll');
        }
    });
    if ($('.start-time').length > 0 && $('.end-time').length > 0) {

        (function () {
            jeDate.skin('green');
            var start = {
                dateCell: '.start-time',
                format: 'YYYY-MM-DD',
                festival: false,
                maxDate: '2099-06-16 23:59:59', //最大日期
                isTime: false,
                choosefun: function (datas) {
                    end.minDate = datas; //开始日选好后，重置结束日的最小日期
                },
                clearfun: function () {
                    end.minDate = '1900-01-01 00:00:00';
                }
            };
            var end = {
                dateCell: '.end-time',
                format: 'YYYY-MM-DD',
                festival: false,
                maxDate: '2099-06-16 23:59:59', //最大日期
                isTime: false,
                choosefun: function (datas) {
                    start.maxDate = datas; //将结束日的初始值设定为开始日的最大日期
                },
                clearfun: function () {
                    start.maxDate = "2099-06-16 23:59:59";
                }
            };
            jeDate(start);
            jeDate(end);
        }());
    }
    if ($('.occur-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".occur-time",
            format: "YYYY-MM-DD hh:mm:ss",
            isTime: true,
            festival: false
        });
    }
    if ($('.input-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".input-time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if ($('.modify-time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".modify-time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if ($('.time').length > 0) {
        jeDate.skin('green');
        jeDate({
            dateCell: ".time",
            format: "YYYY-MM-DD",
            isTime: false,
            festival: false
        });
    }
    if ($('.entry-time').length > 0) {
        (function () {
            var pl = new Placeholder('.entry-time');
            if (!pl.isPlaceholer()) {
                pl.init();
            }
        }());
    }
    if ($('.birth-date').length > 0) {
        (function () {
            var pl1 = new Placeholder('.birth-date');
            if (!pl1.isPlaceholer()) {
                pl1.init();
            }
        }());
    }
    //获取选中行
    $('.table').on('click-row.bs.table', function (e, row, $element) {
        $('.selecttr', $('.table')).removeClass('selecttr');
        $($element).addClass('selecttr');
    });
});



/*
 * venson common.js
 * 
 * */
var Comm = {};
var baseUrl = window.location.protocol + "//" + window.location.host + "/mybatis/";
//前台跳转前缀
var baseUIUrl = window.location.protocol + "//" + window.location.host + "/mybatis/";

function getUrlParam(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); // 构造一个含有目标参数的正则表达式对象
    var r = window.location.search.substr(1).match(reg); // 匹配目标参数
    if (r)
        return unescape(r[2]);
    else
        return null; // 返回参数值
}
var priviledgesID = getUrlParam("id");

function goTo(url) {
    location.href = url + "?id=" + priviledgesID;
}
//当表格大小变化时，设置iframe的大小
$('.table').on('reset-view.bs.table', function () {
    $(window.parent.document).find('.tab-pane.active').height($('body>div').outerHeight());
    parent.$(window.parent.document).trigger('resizeHeight');
    //光标定义到第一行
    $(".fixed-table-body .table tbody tr").first().addClass('selecttr');
});

Comm.confirm = function (text, handle, messageType) {
    var option = {};
    option.type = "confirm";
    option.onConfirmBtnClick = handle;
    option.messageType = (!messageType) ? "warning" : messageType;
    option.content = text;
    var dialog = new parent.window.CustomDialog(option);
    return dialog;
}
Comm.alert = function (text, messageType) {
    var option = {};
    option.type = "alert";
    option.messageType = (!messageType) ? "warning" : messageType;
    option.content = text;
    var dialog = new parent.window.CustomDialog(option);
}

Comm.deleteObject = function (url, table) {
    var $table = $(table);
    var row = $table.bootstrapTable('getSelections');
    if (row.length <= 0)
        this.alert("请勾选要删除的对象！");
    else {
        this.confirm('是否要删除选择的' + row.length + '个对象', function () {
            $.each(row, function (i, e) {
                Comm.deleteAjax(url, $table, e.id);
            });
        })
    }
}

Comm.modifyObject = function (url, table) {
    var objId = Comm.getSelectedRow($(table));
    if (objId)
        location.href = url + "?objId=" + objId.id + "&id=" + priviledgesID;
    else
        this.alert("请点击要修改的行");


}

Comm.getSelectedRow = function ($table) {
    var index = $table.find('tr.selecttr').data('index');
    return $table.bootstrapTable('getData')[index];
}

/**
 * 封装删除ajax函数
 * <br>param: url 接口地址
 * <br>param: table bootstrap表格
 * <br>param: ids 删除的id
 * */
Comm.deleteAjax = function (url, table, ids) {
        $.ajax({
            type: "POST",
            url: baseUrl + url,
            data: {
                id: ids,
                "priviledgesID": priviledgesID
            },
            dataType: "json",
            success: function (response) {
                if (response.status == 0)
                    table.bootstrapTable('remove', {
                        field: 'id',
                        values: [ids]
                    });
                else
                	this.alert("错误提示：" + response.message);

            },
            error: function (response) {
                this.alert("连接服务器出错，请检查！");
            }
        });
    }
    /**
     * 伪多态保存函数
     * 
     * */
Comm.saveAjax = function (url, param, handle) {
        if (typeof (arguments[0]) == "object") {
            Comm.saveDataByObject(arguments[0]);
        } else {
            var l = arguments.length;
            var option = {};
            if (l == 2) {
                option.url = arguments[0];
                option.params = arguments[1];
                Comm.saveDataByObject(option);
            } else if (l == 3) {
                option.url = arguments[0];
                option.params = arguments[1];
                option.handle = arguments[2];
                Comm.saveDataByObject(option)
            }

        }
    }
    /**
     * 快速保存表单数据
     * <br>param:url 接口地址
     * <br>param:handle 结果处理
     * 
     * */
Comm.fastSaveAjax = function (url, handle) {
        handle = (handle) ? handle : "back";
        if (!Comm.checkError()) {
            Comm.saveAjax(url, Comm.getParameters(), handle);
        }
    }
    /**
     * 快速修改表单数据
     * <br>param:url 接口地址
     * <br>param:objId 修改对象Id
     * <br>param:handle 结果处理
     * 
     * */
Comm.fastModifyAjax = function (url, objId, handle) {
        handle = (handle) ? handle : "back";
        if (!Comm.checkError()) {
            var params = Comm.getParameters();
            params.id = objId;
            Comm.saveAjax(url, params, handle);
        }
    }
    /**
     * 封装保存ajax函数
     * <br>param: option 参数格式{"url":"","async":false,"tip","#tag","params":{},"handle"} 
     * */
Comm.saveDataByObject = function (option) {
        option.async = (!option.async) ? option.async : true;
        option.type = (!option.type) ? "POST" : option.type;
        option.tip = (!option.tip) ? '#saveId' : option.tip;
        if (typeof (option.params) == "object") {
            option.params.priviledgesID = priviledgesID;
        }
        if (!option.success) {
            option.success = function (response) {
                if (response.status == 0) {

                    if (option.handle) {
                        if (option.handle == "current") {
                            location.href = location.href;
                        } else if (option.handle == "back") {
                            location.href = document.referrer;
                        } else if (option.handle == "returnValue") {
                            window.primaryKey = response.rows;
                        } else if (option.handle == "refresh") {
                            $('.table').bootstrapTable('refresh');
                        }
                    }
                } else {
                    if (response.message)
                        $(option.tip).tips({
                            msg: response.message
                        });
                    else
                        $(option.tip).tips({
                            msg: "保存失败，请联系管理员！"
                        });
                }
            }
        }
        if (!option.error) {
            option.error = function () {
                $(option.tip).tips({
                    msg: "网络出错，请检查网络！"
                });
            }
        }
        $.ajax({
            type: option.type,
            url: baseUrl + option.url,
            data: option.params,
            async: option.async,
            dataType: "json",
            success: option.success,
            error: option.error
        });
    }
    /*根据页面定义的样式自动校验参数*/
Comm.checkError = function () {
        var hasError = false;
        $("form :input").not(":button").not(":file").each(function (i, e) {
            var $label = $(this).parent("div").prev("label");
            if ($label.children("span").hasClass("c-red")) {
                if ($.trim(e.value).length == 0) {
                    if (e.lang) {
                        $(this).tips({
                            msg: e.lang + "不能为空！"
                        });
                    } else {
                        var text = $.trim($label.text());
                        if (text.length > 0) {
                            text = text.substring(1, text.length - 1);
                            $(this).tips({
                                msg: text + "不能为空！"
                            });
                        } else {
                            $(this).tips({
                                msg: "该值不能为空！"
                            });
                        }

                    }
                    hasError = true;
                }
            }
        })
        return hasError;
    }
    /*根据页面存在的表单自动获取参数*/
Comm.getParameters = function () {
    var params = {};
    $("form :input").not(":button").not(":file").each(function (i, e) {
        params[e.id] = e.value
    })
    return params;
}

Comm.setSelectByOption = function (option) {
        option.params = (option.params) ? option.params : {};
        var data = this.getData(option.url, option.params);
        $(option.tag).html("<option></option>");
        var rows = [];
        if (option.handle) {
            $.each(data, function (i, e) {
                rows.push({
                    id: e.text,
                    text: e.text
                })
            })
        } else {
            rows = data
        }
        $(option.tag).select2({
            placeholder: '',
            minimumResultsForSearch: Infinity,
            allowClear: isClear,
            data: rows
        });
    }
    /**
     * ajax设置下拉框
     * <br>param: url 接口地址
     * <br>param: tag 目标标签
     * */
Comm.setSelect = function (url, tag, handle) {
    var option = {
        "url": url,
        "tag": tag,
        "handle": handle
    };
    this.setSelectByOption(option);
}

Comm.setText = function (url, tag, params) {
        params.priviledgesID = priviledgesID;
        var data = this.getData(url, params);
        $(tag).val(data);
    }
    /**
     * ajax设置编辑数据
     * <br>param: url 接口地址
     * <br>param: objId 对象Id
     * <br>param: filter 过滤的参数
     * */
Comm.setData = function (url, objId, filter) {
    var data = Comm.getData(url, {
        "id": objId,
        "priviledgesID": priviledgesID
    });
    Comm.setFormData(data, filter);

}

Comm.setFormData = function (data, filter) {
        if (filter) {
            $("form :input").not(":button").each(function (i, e) {
                var $this = $(this);
                $.each(filter, function (index, name) {
                    if (e.id != name) {
                        if ($this.is("input[type='text']")) {
                            $this.val(data[e.id]);
                        } else if ($this.is("select")) {
                            $this.val(data[e.id]).trigger('change');
                        }
                    }
                })
            })
        } else {
            $("form :input").not(":button").each(function (i, e) {
                if ($(this).is("input[type='text']") || $(this).is("textarea")) {
                    $(this).val(data[e.id])
                } else if ($(this).is("select")) {
                    $(this).val(data[e.id]).trigger('change');
                }
            })
        }
    }
    /**
     * ajax设置checkbox
     * <br>param: url 接口地址
     * <br>param: objId 对象Id
     * <br>param: tag 设置目标
     * */
Comm.setCheckbox = function (url, objId, tag) {
        data = this.getData(url, {
            "priviledgesID": priviledgesID,
            "id": objId
        });
        var inputs = $(tag);
        $.each(data, function (i, v) {
            $.each(inputs, function (i1, v1) {
                if (v.id == $(this).val()) {
                    this.checked = true;
                }

            });
        });
    }
    /**
     * 获取已勾选的checkbox参数
     * <br>param: tag 获取目标
     * <br>param: paramName 参数名
     * */
Comm.getCheckedData = function (tag, paramName) {
    var o = Comm.getCheckedObject(tag);
    return Comm.checkDataToParam(o, paramName);
    //  var ids=[];
    //  ids.push("priviledgesID=");
    //  ids.push(priviledgesID);
    //  $($(tag)).each(function(i,v){
    //      ids.push("&"+paramName+"=");
    //      ids.push($(this).val());
    //  })
    //  if(ids.length>2){
    //      return ids.join('');
    //  }else{
    //      return null;
    //  }
}

Comm.checkDataToParam = function (o, paramName) {
    var ids = [];
    ids.push("priviledgesID=");
    ids.push(priviledgesID);
    for (var k in o) {
        ids.push("&" + paramName + "=");
        ids.push(k);
    }
    if (ids.length > 2) {
        console.log(ids.join(''));
        return ids.join('');
    } else {
        return "";
    }
}

Comm.checkDataToName = function (o) {
    var name = [];
    for (var k in o) {
        name.push(o[k] + ",");
    }
    if (name.length > 0) {
        if (name.length > 3) {
            return name[0] + name[1] + name[2].substring(0, name[2].length - 1) + "...";
        } else {
            var n = name.join('');
            return n.substring(0, n.length - 1);
        }
    } else {
        return "";
    }
}

Comm.getCheckedObject = function (tag) {
    var o = {};
    $($(tag)).each(function (i, v) {
        o[$(this).val()] = $(this).next("span").text();
    })
    return o;
}
Comm.getData = function (url, params, cache) {
    params = (params) ? params : {};
    cache = (cache) ? cache : false;
    var name = this.builderName(url, params);
    params.priviledgesID = priviledgesID;
    var data;
    if (!window.cache) {
        $.ajax({
            type: "POST",
            url: baseUrl + url,
            data: params,
            async: false,
            dataType: "json",
            success: function (d) {
                if (d.status == 0) {
                    data = d.rows;
                    if (cache) {
                        parent.window.cache[name] = data;
                    }
                    //localStorage.setItem(name, JSON.stringify(data));
                } else {
                	this.alert(d.message, "error");
                }
            },
            error: function () {
            	this.alert("网络出错，请联系管理员！", "error");
            }
        });
    } else {
        data = parent.window.cache[name];
    }

    return data;
}
Comm.builderName = function (url, params) {
        var name = url.replace(/\//g, "$");
        if (typeof (params) == 'object') {
            var n = [];
            for (var i in params) {
                n.push(params[i]);
            }
            return name + n.join('');
        } else {
            return name + params.replace(/\&/g, "$");
        }
    }
    /**
     * 设置权限菜单
     * */
Comm.setPriviledgeMenu = function () {
    data = this.getData("priviledges/getMenu", {}, true);
    $.each(data.childNode, function (i, v) {
        $("#content").append(getMenu(v));
    });
    $.each($(".priviledgesGroup"), function (i, e) {
        $(this).click(function () {
            var checkAll = this.checked;
            $.each($(this).parent("label").parent("div .checkbox-title").next("div .checkbox-content").find(":checkbox"), function (i1, o) {
                this.checked = checkAll;
            })
        })
    })

    function getMenu(menu) {
        var menu_li = '';
        if (menu.childNode.length > 0) {
            menu_li += '<div class="checkbox-group"><div class="checkbox-title">';
            menu_li += '<label><input name="priviledgesID" class="priviledgesGroup" value=' + menu.id + ' type="checkbox"> <span>' + menu.name + ' </span></label></div>';
            menu_li += '<div class="checkbox-content">';
            $.each(menu.childNode, function (i, v) {
                menu_li += getMenu(v);
            })
            menu_li += "</div></div>"
        } else {
            menu_li += '<label><input name="priviledgesID" value=' + menu.id + ' type="checkbox"> <span>' + menu.name + ' </span></label>';
        }
        return menu_li;
    };
}

/**
 * 设置教师任教班级
 * */
Comm.setTeacherClassMenu = function () {
        var data = this.getData("tClass/getShool", {}, true);
        var html = [];
        $.each(data.grades, function (i, e) {
            html.push('<tr><td><input type="checkbox" name="grade" value="' + e.name + '"><span>' + e.name + '</span></td><td><div class="checkbox-row">');
            $.each(e.classes, function (i1, o) {
                html.push('<label><input type="checkbox" name="classname" value="' + o.id + '"><span>' + o.text + '</span></label>');
            });
            html.push('</div></td></tr>')
        })
        $("#content").append(html.join(''));
        $('#content tr').eq(0).prepend('<td class="bl0 w10p" rowspan='+data.grades.length+'><input name="all" type="checkbox"><span>全校</span></td>');
        $.each($("#content input[name='grade']"), function (i, e) {
            $(this).click(function () {
                var checkAll = this.checked;
                $.each($(this).parent().next().find(':checkbox'), function (i1, o) {
                    this.checked = checkAll;
                })
            })
        });
        $("input[name='all']").click(function () {
            var checkAll = this.checked;
            $.each($(this).parent().parent().parent().find(':checkbox'), function (i1, o) {
                this.checked = checkAll;
            })

        })
    }
    /**
     * 下载excel模板
     * <br>param: templateName 模板名称
     * <br>param: downloadName 下载文件名称
     * */
Comm.downloadTemplate = function (templateName, downloadName) {
        window.location.href = baseUrl + "attachment/excelDownload?fileName=/template/" + templateName + "&downName=" + downloadName;
    }
    /**
     * 下载excel模板
     * <br>param: fileName 下载文件名称
     * */
Comm.exportExcel = function (fileName) {
    var data = $('.table').bootstrapTable('getData');
    this.postByForm(baseUrl + 'excel/exportExcelByCreate', {
        "json": JSON.stringify(data),
        "cloums": JSON.stringify(pageColumns),
        "fileName": fileName,
        "priviledgesID": priviledgesID
    })
}

Comm.postByForm = function (URL, PARAMS) {
    var temp = document.createElement("form");
    temp.action = URL;
    temp.method = "post";
    temp.style.display = "none";
    for (var x in PARAMS) {
        var opt = document.createElement("textarea");
        opt.name = x;
        opt.value = PARAMS[x];
        // alert(opt.name)        
        temp.appendChild(opt);
    }
    document.body.appendChild(temp);
    temp.submit();
    temp.parentNode.removeChild(temp);
}

Comm.post = function (url,response, params) {
	url=baseUrl+url;
	params=params?params:{};
	params.priviledgesID=priviledgesID;
	$.post(url, params,response, "json");
}

/**
 * 自动获取查询参数并发送查询请求
 * */
var queryParam = {};
queryParam.priviledgesID = priviledgesID;
Comm.queryData = function () {
    queryParam = {};
    queryParam.priviledgesID = priviledgesID;
    $("form :input").not(":button").each(function (i, e) {
        if ($.trim($(this).val())) {
            queryParam[e.id] = $(this).val();
        }
    });
    $(".table").bootstrapTable('refresh', {
        query: queryParam
    });
}

var pageColumns = [];
Comm.bootstrapTableParams = function (option) {
    pageColumns = option.columns;
    var params = {
        url: baseUrl + option.url,
        method: 'POST',
        contentType: 'application/x-www-form-urlencoded',
        dataField: 'rows',
        cache: false,
        sidePagination: 'server',

        pagination: true,
        pageNumeber: 1,
        pageSize: 20,
        pageList: [20, 30, 50, 100],
        checkboxHeader: false,
        height: 500,
        cache: false,
        paginationDetailHAlign: 'right',
        columns: option.columns,
        queryParams: function (params) {
            $.each(queryParam, function (i, e) {
                params[i] = e;
            })
            return params;
        }
    }
    return params;
}

Comm.uploadFile = function (type, handle, tag) {
    if (!$(":file").fileTypeJudge(type))
        return;
    var url = "";
    if (tag) {
        $(tag).text($(":file").val())
    }
    if (type == "photo") {
        url = "attachment/uploadImg";
    } else if (type == "excel") {
        url = "attachment/excelUpload";
    } else {
        url = "attachment/uploadAttachment";
    }
    var options = {
        success: handle, // 提交后的回调函数
        url: baseUrl + url, //默认是form的action，如果申明，则会覆盖
        type: "POST", // 默认值是form的method("GET" or "POST")，如果声明，则会覆盖
        dataType: "json", // html（默认）、xml、script、json接受服务器端返回的类型
    }
    $("#uploadForm").ajaxSubmit(options);
}

Comm.uploadImage = function (handle) {
    var options = {
        success: handle, // 提交后的回调函数
        url: baseUrl + "attachment/uploadImg", //默认是form的action，如果申明，则会覆盖
        type: "POST", // 默认值是form的method("GET" or "POST")，如果声明，则会覆盖
        dataType: "json", // html（默认）、xml、script、json接受服务器端返回的类型
    }
    $("#uploadForm").ajaxSubmit(options);
}

Comm.paramToString = function (obj) {
    var params = [];
    for (var key in obj) {
        params.push("&" + key + "=");
        params.push(obj[key]);
    }
    return params.join('');
}
var DYInit = {};
/**
 * 根据页面需求进行数据依赖注入,并将数据缓存到父窗口中。
 * */
DYInit.IOC = function () {
    //定义需要注入的对象
    var grade = {
        "name": "grade",
        "url": "xtEnumbank/getEnumByEnumTypeId",
        "params": {
            "id": "0001"
        }
    };
    var educationSituation = {
        "name": "educationSituation",
        "url": "xtEnumbank/getEnumByEnumTypeId",
        "params": {
            "id": "0002"
        },
        "handle": true
    };
    var userRole = {
        "name": "userRole",
        "url": "role/showRole"
    };
    var moralType = {
        "name": "moralType",
        "url": "moralType/getAllMoralType",
        "handle": true
    };
    var moralRule = {
        "name": "moralRule",
        "url": "moralRules/getAllMoralRule",
        "handle": true
    };
    var schoolClass = {
        "name": "schoolClass",
        "url": "tClass/getAllClass",
        "handle": true
    };
    var teacherClass = {
        "name": "teacherClass",
        "url": "tClass/getTClassByTeacher",
        "handle": true
    };
    var schoolTerm = {
        "name": "schoolTerm",
        "url": "schoolTerm/getAllSchoolTerm",
        "handle": true
    };
    var iocArray = [grade, educationSituation, userRole, moralType, moralRule, schoolClass, teacherClass, schoolTerm];
    //查找doc中是否需要注入
    for (var i in iocArray) {
        if ($('.' + iocArray[i].name).length > 0) {
            this.setData(iocArray[i]);
        }
    }
}
DYInit.setData = function (option) {
    option.params = (option.params) ? option.params : {};
    var data = Comm.getData(option.url, option.params, true)
        //判断是否需要进行数据转换
    var rows = [];
    if (option.handle && isMoralModule) {
        for (var i in data) {
            var e = data[i];
            rows.push({
                id: e.text,
                text: e.text
            })
        }
    } else {
        rows = data;
    }
    //设置数据
    $('.' + option.name).html("<option></option>");
    $('.' + option.name).select2({
        placeholder: '',
        minimumResultsForSearch: Infinity,
        allowClear: isClear,
        data: rows
    });
}
DYInit.IOC();
