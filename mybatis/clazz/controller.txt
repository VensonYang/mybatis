package controller.#{package};

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import bean.utils.BeanDirectorFactory;
import common.StaticsConstancts;
import controller.base.ControllerContext;
import controller.base.ControllerHelper;
import controller.base.ValidParam;
import controller.base.ValidationAware;
import controller.base.ValidationAwareSupport;
import controller.result.ReturnResult;
import controller.result.StatusCode;
import model.common.QueryVO;
import model.#{package}.#{Entity}VO;
import model.#{package}.#{Entity}VO.IAdd#{Entity};
import model.#{package}.#{Entity}VO.IModify#{Entity};
import service.#{package}.#{Entity}Service;

@RequestMapping("/#{entity}")
@ResponseBody
@Controller
public class #{Entity}Controller {
	private static final Logger logger = LoggerFactory.getLogger(#{Entity}Controller.class);
	@Autowired
	private #{Entity}Service #{entity}Service;

	@RequestMapping("showQuery#{Entity}")
	public ReturnResult showQuery#{Entity}() {
		ReturnResult returnResult = ControllerContext.getResult();
		QueryVO queryVO = BeanDirectorFactory.getBeanDirector().getDataVO(QueryVO.class);
		Map<String, Object> result = #{entity}Service.query#{Entity}(queryVO);
		returnResult.setStatus(StatusCode.SUCCESS).setRows(result.get(StaticsConstancts.DATA))
				.setTotal(result.get(StaticsConstancts.TOTAL));
		logger.debug("showQuery#{Entity} success");
		return returnResult;
	}

	@RequestMapping(value = "add#{Entity}")
	public ReturnResult add#{Entity}() {
		ReturnResult returnResult = ControllerContext.getResult();
		ValidationAware va = new ValidationAwareSupport();
		#{Entity}VO #{entity}VO = BeanDirectorFactory.getBeanDirector().getDataVO(#{Entity}VO.class, va,
				IAdd#{Entity}.class);
		if (ControllerHelper.checkError(#{entity}VO, va, returnResult, logger)) {
			return returnResult;
		}
		#{entity}Service.add#{Entity}(#{entity}VO);
		returnResult.setStatus(StatusCode.SUCCESS);
		logger.debug("add#{Entity} success");
		return returnResult;
	}

	@RequestMapping(value = "modify#{Entity}")
	public ReturnResult modify#{Entity}() {
		ReturnResult returnResult = ControllerContext.getResult();
		ValidationAware va = new ValidationAwareSupport();
		#{Entity}VO #{entity}VO = BeanDirectorFactory.getBeanDirector().getDataVO(#{Entity}VO.class, va,
				IModify#{Entity}.class);
		if (ControllerHelper.checkError(#{entity}VO, va, returnResult, logger)) {
			return returnResult;
		}
		#{entity}Service.modify#{Entity}(#{entity}VO);
		returnResult.setStatus(StatusCode.SUCCESS);
		logger.debug("modify#{Entity} success");
		return returnResult;
	}

	@RequestMapping(value = "delete#{Entity}")
	public ReturnResult delete#{Entity}() {
		ReturnResult returnResult = ControllerContext.getResult();
		String param = ControllerHelper.checkParam(ValidParam.NUM);
		if (param == null) {
			return returnResult;
		}
		try {
			#{entity}Service.delete#{Entity}(Integer.parseInt(param));
			returnResult.setStatus(StatusCode.SUCCESS);
			logger.debug("delete#{Entity} success");
		} catch (Exception e) {
			returnResult.setStatus(StatusCode.FAIL.setMessage("已被引用，无法删除"));
			logger.debug("delete#{Entity} fail");
		}
		return returnResult;
	}

	@RequestMapping(value = "get#{Entity}")
	public ReturnResult get#{Entity}() {
		ReturnResult returnResult = ControllerContext.getResult();
		String param = ControllerHelper.checkParam(ValidParam.NUM);
		if (param == null) {
			return returnResult;
		}
		returnResult.setStatus(StatusCode.SUCCESS).setRows(#{entity}Service.get#{Entity}VOById(Integer.parseInt(param)));
		logger.debug("get#{Entity} success");
		return returnResult;
	}

}
